import requests
import base64
import time

# API key for VirusTotal (replace with your own key).
API_KEY = ""
# Headers for API requests.
HEADERS = {
    "accept": "application/json",
    "x-apikey": API_KEY,
}

def get_ip_location(ip):
    """Get geolocation details for an IP address using ip-api."""
    response = requests.get(f"http://ip-api.com/json/{ip}")
    if response.status_code == 200:
        data = response.json()
        if data["status"] == "success":
            return {
                "Country": data.get("country"),
                "Region": data.get("regionName"),
                "City": data.get("city"),
                "Latitude": data.get("lat"),
                "Longitude": data.get("lon"),
                "ISP": data.get("isp"),
            }
    return None
def scan_ip(ip):
    """Scan an IP address for malicious activity using VirusTotal."""
    url = f"https://www.virustotal.com/api/v3/ip_addresses/{ip}"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        stats = data.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
        malicious = stats.get("malicious", 0)
        total = sum(stats.values())
        percentage = (malicious / total * 100) if total > 0 else 0
        return percentage
    return None

def scan_url(url):
    """Scan a URL for malicious activity using VirusTotal."""
    submit_url = "https://www.virustotal.com/api/v3/urls"
    payload = {"url": url}
    response = requests.post(submit_url, headers=HEADERS, data=payload)
    if response.status_code == 200:
        url_id = base64.urlsafe_b64encode(url.encode()).decode().strip("=")
        time.sleep(15)  # Wait for analysis to complete.
        result_url = f"https://www.virustotal.com/api/v3/urls/{url_id}"
        result_response = requests.get(result_url, headers=HEADERS)
        if result_response.status_code == 200:
            data = result_response.json()
            stats = data.get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
            malicious = stats.get("malicious", 0)
            total = sum(stats.values())
            percentage = (malicious / total * 100) if total > 0 else 0
            return percentage
    return None

if __name__ == "__main__":
    ip = input("Enter an IP address to scan: ").strip()
    if ip:
        print(f"Scanning IP: {ip}")
        mal_percent = scan_ip(ip)
        if mal_percent is not None:
            print(f"Malicious Percentage: {mal_percent:.2f}%")
            location = get_ip_location(ip)
            if location:
                print("Location Details:")
                for key, value in location.items():
                    print(f"  {key}: {value}")
        else:
            print("Failed to scan IP.")

    url = input("\nEnter a URL to scan: ").strip()
    if url:
        print(f"Scanning URL: {url}")
        mal_percent = scan_url(url)
        if mal_percent is not None:
            print(f"Malicious Percentage: {mal_percent:.2f}%")
        else:
            print("Failed to scan URL.")
